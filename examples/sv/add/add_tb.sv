import godan::*;

// This interface is automatically @generated by Verb.
// It is not intended for manual editing.
interface add_bfm #(
  parameter integer WORD_SIZE = 32
);
  logic cin;
  logic[WORD_SIZE-1:0] in0;
  logic[WORD_SIZE-1:0] in1;
  logic[WORD_SIZE-1:0] sum;
  logic cout;
endinterface

module add_tb #(
    parameter integer WORD_SIZE = 16
);

    int events = $fopen("events.log", "w");

    // instantiate the set of signals to communicate with the hw dut
    add_bfm #(
        .WORD_SIZE(WORD_SIZE)
    ) bfm();
    
    // instantiate the set of signals to communicate with the sw model
    add_bfm #(
        .WORD_SIZE(WORD_SIZE)
    ) mdl();

    // instantiate the device under test
    add #(
        .WORD_SIZE(WORD_SIZE)
    ) dut (
        .cin(bfm.cin),
        .in0(bfm.in0),
        .in1(bfm.in1),
        .sum(bfm.sum),
        .cout(bfm.cout)
    );

    logic clk, halt;
    
    always begin
        time period = 10;
        spin_clock(clk, period, halt);
    end

    // drive incoming transactions
    always begin: producer 
        int inputs = $fopen("inputs.txt", "r");
        while(!$feof(inputs)) begin
            send(inputs);
            @(posedge clk);
        end
        wait(0);
    end

    // check outgoing transactions for correctness
    always begin: consumer
        int outputs = $fopen("outputs.txt", "r");
        while(!$feof(outputs)) begin
            @(posedge clk);
            compare(events, outputs);
        end
        complete(events, halt);
    end

    // This procedure is automatically @generated by Verb.
    // It is not intended for manual editing.
    task automatic send(int fdi);
        string row;
        if(!$feof(fdi)) begin
            $fgets(row, fdi);
            if(row.len() == 0) return;
            $sscanf(drive(row), "%b", bfm.cin);
            $sscanf(drive(row), "%b", bfm.in0);
            $sscanf(drive(row), "%b", bfm.in1);
        end
    endtask

    // This procedure is automatically @generated by Verb.
    // It is not intended for manual editing.
    task automatic compare(int e, int o);
    string row, recv, expt;
    if(!$feof(o)) begin
        $fgets(row, o);
        if(row.len() == 0) return;

        $sformat(recv, "%b", bfm.sum);
        $sscanf(load(row), "%b", mdl.sum);
        $sformat(expt, "%b", mdl.sum);
        assert_eq(e, recv, expt, "sum");

        $sformat(recv, "%b", bfm.cout);
        $sscanf(load(row), "%b", mdl.cout);
        $sformat(expt, "%b", mdl.cout);
        assert_eq(e, recv, expt, "cout");
    end
    endtask

endmodule
