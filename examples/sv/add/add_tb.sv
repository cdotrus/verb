import godan::*;

// This interface is automatically @generated by Verb.
// It is not intended for manual editing.
interface add_bfm #(
  parameter integer WORD_SIZE
);
  logic cin;
  logic[WORD_SIZE-1:0] in0;
  logic[WORD_SIZE-1:0] in1;
  logic[WORD_SIZE-1:0] sum;
  logic cout;
endinterface

module add_tb #(
    parameter integer WORD_SIZE = 16
);

    int events = $fopen("events.log", "w");

    // instantiate the set of signals to communicate with the hw dut
    add_bfm #(
        .WORD_SIZE(WORD_SIZE)
    ) bfm();
    
    // instantiate the set of signals to communicate with the sw model
    add_bfm #(
        .WORD_SIZE(WORD_SIZE)
    ) mdl();

    // instantiate the device under test
    add #(
        .WORD_SIZE(WORD_SIZE)
    ) dut (
        .cin(bfm.cin),
        .in0(bfm.in0),
        .in1(bfm.in1),
        .sum(bfm.sum),
        .cout(bfm.cout)
    );

    logic clk, halt;
    
    `spin_clock(clk, 40ns, halt);

    // drive incoming transactions
    always begin: producer 
        int inputs = $fopen("inputs.txt", "r");
        while(!$feof(inputs)) begin
            send(inputs);
            @(negedge clk);
        end
        wait(0);
    end

    // check outgoing transactions for correctness
    always begin: consumer
        int outputs = $fopen("outputs.txt", "r");
        while(!$feof(outputs)) begin
            @(posedge clk);
            compare(events, outputs);
        end
        `complete(events, halt);
    end

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task send(int i);
        automatic string row;
        if(!$feof(i)) begin
            $fgets(row, i);
            `drive(row, bfm.cin);
            `drive(row, bfm.in0);
            `drive(row, bfm.in1);
        end
    endtask

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task compare(int e, int o);
        automatic string row;
        if(!$feof(o)) begin
            $fgets(row, o);
            `load(row, mdl.sum);
            `assert_eq(e, bfm.sum, mdl.sum, "sum");
            `load(row, mdl.cout);
            `assert_eq(e, bfm.cout, mdl.cout, "cout");
        end
    endtask

endmodule
