// Testbench: alu_tb
//
// Tests the `alu` module using file IO.

// This interface is automatically @generated by Verb.
// It is not intended for manual editing.
interface alu_if;
    import sys_defs::*;
    DATA opa;
    DATA opb;
    ALU_FUNC alu_func;
    DATA result;
endinterface

module alu_tb
    import godan::*;
    import sys_defs::*;
#(
    // No Parameters
);
    logic clock = 1'b0;

    alu_if mdl();

    alu_if bfm();
        
    alu dut (
        .opa(bfm.opa),
        .opb(bfm.opb),
        .alu_func(bfm.alu_func),
        .result(bfm.result)
    );

    always #(20ns) clock = ~clock;

    // drive incoming transactions
    always begin: producer 
        automatic int inputs = $fopen("inputs.txt", "r");

        $dumpfile("alu_tb.vcd");
        $dumpvars(1, alu_tb.dut);

        while(!$feof(inputs)) begin
            send(inputs);
            @(negedge clock);
        end
        wait(0);
    end

    // check outgoing transactions for correctness
    always begin: consumer
        automatic int outputs = $fopen("outputs.txt", "r");

        while(!$feof(outputs)) begin
            @(negedge clock);
            recv(outputs);
        end
        finish();
    end

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task send(int fd);
        automatic string line;
        // Read next set of input values from file
        if(!$feof(fd)) begin
            $fgets(line, fd);
            $sscanf(parse(line), "%b", bfm.opa);
            $sscanf(parse(line), "%b", bfm.opb);
            $sscanf(parse(line), "%b", bfm.alu_func);
        end
    endtask

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task recv(int fd);
        automatic string line;
        // Read expected output values from file
        if(!$feof(fd)) begin
            $fgets(line, fd);
            $sscanf(parse(line), "%b", mdl.result);
        end
        // Compare received ouputs with expected outputs
        assert_eq(bfm.result, mdl.result, "result");
    endtask

endmodule
