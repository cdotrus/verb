// Testbench: alu_tb
//
// Tests the `alu` module using file IO.

// This interface is automatically @generated by Verb.
// It is not intended for manual editing.
interface alu_bfm;
    import sys_defs::*;
    DATA opa;
    DATA opb;
    ALU_FUNC alu_func;
    DATA result;
endinterface

module alu_tb
    import godan::*;
    import sys_defs::*;
#(
    // No Parameters
);

    int events = $fopen("events.log", "w");

    logic clock = 1'b0;
    logic halt = 1'b0;

    alu_bfm mdl();

    alu_bfm bfm();
        
    alu dut (
        .opa(bfm.opa),
        .opb(bfm.opb),
        .alu_func(bfm.alu_func),
        .result(bfm.result)
    );

    `spin_clock(clock, 40ns, halt);

    // drive incoming transactions
    always begin: producer 
        automatic int inputs = $fopen("inputs.txt", "r");

        $dumpfile("alu_tb.vcd");
        $dumpvars(1, alu_tb.dut);

        while(!$feof(inputs)) begin
            send(inputs);
            @(negedge clock);
        end
        wait(0);
    end

    // check outgoing transactions for correctness
    always begin: consumer
        automatic int outputs = $fopen("outputs.txt", "r");

        while(!$feof(outputs)) begin
            @(negedge clock);
            compare(events, outputs);
        end
        `complete(events, halt);
    end

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task send(int i);
    automatic string row;
    if(!$feof(i)) begin
        $fgets(row, i);
        `drive(row, bfm.opa);
        `drive(row, bfm.opb);
        `drive(row, bfm.alu_func);
    end
    endtask

    // This task is automatically @generated by Verb.
    // It is not intended for manual editing.
    task compare(int e, int o);
    automatic string row;
    if(!$feof(o)) begin
        $fgets(row, o);
        `load(row, mdl.result);
        `assert_eq(e, bfm.result, mdl.result, "result");
    end
    endtask

endmodule
